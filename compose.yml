name: piwigo

services:

  # *****************************************************************************
  # piwigo
  #   Piwigo is an open-source photo gallery platform designed for managing and 
  #   sharing digital images. It provides a user-friendly web interface with 
  #   features such as albums, tagging, metadata management, batch processing, 
  #   and access control. Piwigo is especially useful for organizing personal 
  #   collections, collaborative galleries, or professional photography archives. 
  #   When deployed in Docker, this service will run the Piwigo application, 
  #   connecting to its configured database backend (such as MySQL) 
  #   to store user accounts, gallery data, and configuration details. Combined 
  #   with reverse proxy solutions like NGINX Proxy Manager, it can be exposed 
  #   securely for external access.
  #
  # *****************************************************************************
  piwigo:
    image: lscr.io/linuxserver/piwigo:${PIWIGO_VERSION_TAG:-latest}
    container_name: piwigo
    environment:
      - PUID=${PIWIGO_PUID:-1000}
      - PGID=${PIWIGO_GUID:-1000}
      - TZ=${TZ_ID}
    volumes:
      - config:/config
      - ${PIWIGO_GALLERIES_VOLUME}:/gallery
    ports:
      - ${PIWIGO_EXTERNAL_PORT:-8089}:80
    depends_on:
      - mysql
    restart: unless-stopped

  # *****************************************************************************
  # mysql
  #   MySQL is a widely used open-source relational database management system 
  #   known for its speed, stability, and ease of use. It serves as the backend 
  #   database engine for Piwigo, storing critical information such as user 
  #   accounts, photo metadata, album structures, tags, and configuration data. 
  #   By running MySQL in a dedicated service, Piwigo separates application logic 
  #   from persistent data storage, ensuring better performance, isolation, and 
  #   scalability. This setup also enables simplified backups, upgrades, and 
  #   maintenance of the galleryâ€™s data layer. When paired with a reverse proxy, 
  #   MySQL remains internal to the Docker network while securely powering Piwigo.
  #
  # *****************************************************************************
  mysql:
    image: mysql:${MYSQL_VERSION_TAG:-8}
    container_name: mysql-piwigo
    restart: always
    volumes:
      - mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-piwigo}
      MYSQL_USER: ${MYSQL_USER:-piwigo}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-password}
    # -------------------------------------------------------------------------------
    # Uncomment this section to expose mysql to connections outside of the container
    # such as MySQL Workbench
    # -------------------------------------------------------------------------------
    # ports:
    #   - ${MYSQL_EXTERNAL_PORT:-3306}:3306

volumes:
  mysql:
  config:

